/**
 * Custom service worker for LiveNotes with push notification support
 * This file will be merged with the service worker generated by next-pwa
 */

// This line is required by next-pwa and should not be removed
// It will be replaced with the asset precache manifest during build
self.__WB_MANIFEST

// Handle push notifications
self.addEventListener('push', function(event) {
  if (!event.data) {
    console.log('[Service Worker] Push event has no data');
    return;
  }
  
  try {
    const data = event.data.json();
    console.log('[Service Worker] Push data:', data);
    
    const options = {
      body: data.body || 'New notification from LiveNotes',
      icon: data.icon || '/icons/icon-192x192.png',
      badge: '/icons/icon-192x192.png',
      vibrate: [100, 50, 100],
      timestamp: data.timestamp || Date.now(),
      data: {
        dateOfArrival: Date.now(),
        url: data.data?.url || '/',
        ...data.data
      },
      actions: [
        {
          action: 'open',
          title: 'Open'
        },
        {
          action: 'close',
          title: 'Close'
        }
      ]
    };
    
    console.log('[Service Worker] Showing notification with options:', options);
    
    // Show the notification
    event.waitUntil(
      self.registration.showNotification(data.title || 'LiveNotes', options)
        .then(() => console.log('[Service Worker] Notification shown successfully'))
        .catch(error => console.error('[Service Worker] Error showing notification:', error))
    );
  } catch (error) {
    console.error('[Service Worker] Error processing push data:', error);
  }
});

// Handle notification click
self.addEventListener('notificationclick', function(event) {
  console.log('[Service Worker] Notification click received:', event);
  
  // Close the notification
  event.notification.close();
  
  // Handle different actions
  if (event.action === 'close') {
    console.log('[Service Worker] User chose to close notification');
    return;
  }
  
  // Get the notification data
  const urlToOpen = event.notification.data?.url || '/';
  
  // This will open the app and navigate to the specific URL
  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then(function(clientList) {
        // If there's already a window open, focus it and navigate
        for (const client of clientList) {
          if (client.url.includes(self.location.origin) && 'focus' in client) {
            client.focus();
            client.navigate(urlToOpen);
            return;
          }
        }
        
        // If no window is open, open one
        if (clients.openWindow) {
          return clients.openWindow(urlToOpen);
        }
      })
      .catch(error => console.error('[Service Worker] Error handling notification click:', error))
  );
});

// Handle notification close
self.addEventListener('notificationclose', function(event) {
  console.log('[Service Worker] Notification was closed', event);
}); 