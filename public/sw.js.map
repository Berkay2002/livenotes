{"version":3,"file":"../public/sw.js","mappings":";;;AAAA;;;CAGC,GAED,8DAA8D;AAC9D,oEAAoE;AACpEA,KAAKC,aAAa;AAElB,4BAA4B;AAC5BD,KAAKE,gBAAgB,CAAC,QAAQ,SAASC,KAAK;IAC1C,IAAI,CAACA,MAAMC,IAAI,EAAE;;QAEf;IACF;IAEA,IAAI;YAYOA;QAXT,MAAMA,OAAOD,MAAMC,IAAI,CAACC,IAAI;;QAG5B,MAAMC,UAAU;YACdC,MAAMH,KAAKG,IAAI,IAAI;YACnBC,MAAMJ,KAAKI,IAAI,IAAI;YACnBC,OAAO;YACPC,SAAS;gBAAC;gBAAK;gBAAI;aAAI;YACvBC,WAAWP,KAAKO,SAAS,IAAIC,KAAKC,GAAG;YACrCT,MAAM;gBACJU,eAAeF,KAAKC,GAAG;gBACvBE,KAAKX,EAAAA,aAAAA,KAAKA,IAAI,cAATA,iCAAAA,WAAWW,GAAG,KAAI;gBACvB,GAAGX,KAAKA,IAAI;YACd;YACAY,SAAS;gBACP;oBACEC,QAAQ;oBACRC,OAAO;gBACT;gBACA;oBACED,QAAQ;oBACRC,OAAO;gBACT;aACD;QACH;;QAIA,wBAAwB;QACxBf,MAAMgB,SAAS,CACbnB,KAAKoB,YAAY,CAACC,gBAAgB,CAACjB,KAAKc,KAAK,IAAI,aAAaZ,SAC3DgB,IAAI,CAAC,IAAMC,QAAQC,GAAG,CAAC,qDACvBC,KAAK,CAACC,CAAAA,QAASH,QAAQG,KAAK,CAAC,gDAAgDA;IAEpF,EAAE,OAAOA,OAAO;;IAEhB;AACF;AAEA,4BAA4B;AAC5B1B,KAAKE,gBAAgB,CAAC,qBAAqB,SAASC,KAAK;QAarCA;;IAVlB,yBAAyB;IACzBA,MAAMwB,YAAY,CAACC,KAAK;IAExB,2BAA2B;IAC3B,IAAIzB,MAAMc,MAAM,KAAK,SAAS;;QAE5B;IACF;IAEA,4BAA4B;IAC5B,MAAMY,YAAY1B,EAAAA,2BAAAA,MAAMwB,YAAY,CAACvB,IAAI,cAAvBD,+CAAAA,yBAAyBY,GAAG,KAAI;IAElD,0DAA0D;IAC1DZ,MAAMgB,SAAS,CACbW,QAAQC,QAAQ,CAAC;QAAEC,MAAM;QAAUC,qBAAqB;IAAK,GAC1DX,IAAI,CAAC,SAASY,UAAU;QACvB,0DAA0D;QAC1D,KAAK,MAAMC,UAAUD,WAAY;YAC/B,IAAIC,OAAOpB,GAAG,CAACqB,QAAQ,CAACpC,KAAKqC,QAAQ,CAACC,MAAM,KAAK,WAAWH,QAAQ;gBAClEA,OAAOI,KAAK;gBACZJ,OAAOK,QAAQ,CAACX;gBAChB;YACF;QACF;QAEA,iCAAiC;QACjC,IAAIC,QAAQW,UAAU,EAAE;YACtB,OAAOX,QAAQW,UAAU,CAACZ;QAC5B;IACF,GACCJ,KAAK,CAACC,CAAAA,QAASH,QAAQG,KAAK,CAAC,uDAAuDA;AAE3F;AAEA,4BAA4B;AAC5B1B,KAAKE,gBAAgB,CAAC,qBAAqB,SAASC,KAAK;;AAEzD","sources":["webpack://_N_E/./public/custom-sw.js"],"sourcesContent":["/**\r\n * Custom service worker for LiveNotes with push notification support\r\n * This file will be merged with the service worker generated by next-pwa\r\n */\r\n\r\n// This line is required by next-pwa and should not be removed\r\n// It will be replaced with the asset precache manifest during build\r\nself.__WB_MANIFEST\r\n\r\n// Handle push notifications\r\nself.addEventListener('push', function(event) {\r\n  if (!event.data) {\r\n    console.log('[Service Worker] Push event has no data');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    const data = event.data.json();\r\n    console.log('[Service Worker] Push data:', data);\r\n    \r\n    const options = {\r\n      body: data.body || 'New notification from LiveNotes',\r\n      icon: data.icon || '/icons/icon-192x192.png',\r\n      badge: '/icons/icon-192x192.png',\r\n      vibrate: [100, 50, 100],\r\n      timestamp: data.timestamp || Date.now(),\r\n      data: {\r\n        dateOfArrival: Date.now(),\r\n        url: data.data?.url || '/',\r\n        ...data.data\r\n      },\r\n      actions: [\r\n        {\r\n          action: 'open',\r\n          title: 'Open'\r\n        },\r\n        {\r\n          action: 'close',\r\n          title: 'Close'\r\n        }\r\n      ]\r\n    };\r\n    \r\n    console.log('[Service Worker] Showing notification with options:', options);\r\n    \r\n    // Show the notification\r\n    event.waitUntil(\r\n      self.registration.showNotification(data.title || 'LiveNotes', options)\r\n        .then(() => console.log('[Service Worker] Notification shown successfully'))\r\n        .catch(error => console.error('[Service Worker] Error showing notification:', error))\r\n    );\r\n  } catch (error) {\r\n    console.error('[Service Worker] Error processing push data:', error);\r\n  }\r\n});\r\n\r\n// Handle notification click\r\nself.addEventListener('notificationclick', function(event) {\r\n  console.log('[Service Worker] Notification click received:', event);\r\n  \r\n  // Close the notification\r\n  event.notification.close();\r\n  \r\n  // Handle different actions\r\n  if (event.action === 'close') {\r\n    console.log('[Service Worker] User chose to close notification');\r\n    return;\r\n  }\r\n  \r\n  // Get the notification data\r\n  const urlToOpen = event.notification.data?.url || '/';\r\n  \r\n  // This will open the app and navigate to the specific URL\r\n  event.waitUntil(\r\n    clients.matchAll({ type: 'window', includeUncontrolled: true })\r\n      .then(function(clientList) {\r\n        // If there's already a window open, focus it and navigate\r\n        for (const client of clientList) {\r\n          if (client.url.includes(self.location.origin) && 'focus' in client) {\r\n            client.focus();\r\n            client.navigate(urlToOpen);\r\n            return;\r\n          }\r\n        }\r\n        \r\n        // If no window is open, open one\r\n        if (clients.openWindow) {\r\n          return clients.openWindow(urlToOpen);\r\n        }\r\n      })\r\n      .catch(error => console.error('[Service Worker] Error handling notification click:', error))\r\n  );\r\n});\r\n\r\n// Handle notification close\r\nself.addEventListener('notificationclose', function(event) {\r\n  console.log('[Service Worker] Notification was closed', event);\r\n}); "],"names":["self","__WB_MANIFEST","addEventListener","event","data","json","options","body","icon","badge","vibrate","timestamp","Date","now","dateOfArrival","url","actions","action","title","waitUntil","registration","showNotification","then","console","log","catch","error","notification","close","urlToOpen","clients","matchAll","type","includeUncontrolled","clientList","client","includes","location","origin","focus","navigate","openWindow"],"sourceRoot":""}